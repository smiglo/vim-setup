#!/usr/bin/env bash
# vim: fdl=0 ft=sh

# Functions # {{{
checkRemoteVim() { # {{{
  [[ -z $1 ]] && return 1
  local list=$(exec $binary --serverlist)
  local name=$1
  local i=
  for i in $list; do
    [[ $name == $i ]] && return 0
  done
  return 1
} # }}}
# }}}
# Check vim location # {{{
! declare -f echorm >/dev/null 2>&1 && [[ -e $ECHOR_PATH/echor ]] && source $ECHOR_PATH/echor
! declare -f echorm >/dev/null 2>&1 && echor() { : ; }
binary=$VIM_PATH
if [[ -z $binary || ! -x "$binary" ]]; then
  echorm 2 "Binary vim ($binary) does not exist. Searching..."
  if ${IS_MAC:-false}; then
    list="~/Applications ~/Applications/vim /Applications /Applications/vim /Applications/Utilities /Applications/Utilities/vim"
    for i in $list; do
      [[ -d "$i/MacVim.app" ]] && binary="$i/MacVim.app/Contents/MacOS/Vim" && break
    done
  else
    for i in /usr/bin/vim{,.gtk,.gnome,.basic}; do
      [[ -x $i ]] && binary=$i && break
    done
  fi
  [[ ! -x "$binary" ]] && echorm 2 "[FAILED]" && exit 1
  echorm 2 "[DONE ($binary)]"
fi # }}}
# Next, peek at the name used to invoke this script, and set options accordingly # {{{
echorm --name vim
name="$(basename "$0")"
parsing_parameters=true
open_file_method="-p"
check_session_file=false
opts=
optsEnd=
diff_mode=false
# }}}
# Gui mode ? # {{{
use_gui=${VIM_USE_GUI:-false}
case "$name" in
m*|g*|r*|_m*|_g*|_r*) use_gui=true;;
esac # }}}
# Completion # {{{
if [[ "$1" == "@@" ]]; then
  ret_val=
  case $3 in
  --type) # {{{
    $IS_MAC && source $ALIASES --force
    ret_val="$(declare -F | awk '{print $3}' | command grep "^[^_]" | sort -u)";; # }}}
  --which) # {{{
    ret_val="$(echo -n "$PATH:." | xargs -d: -I{} -r -- find -L {} -maxdepth 1 -mindepth 1 -type f -executable -printf '%P\n' 2>/dev/null | sort -u)";; # }}}
  --link) # {{{
    ret_val="--all"
    ret_val+=" $(command cd $VIM_SESSIONS_PATH 2>/dev/null && ls *.vim)"
    ret_val+=" $(echo "$ret_val" | sed 's|\(\.as\)\?\.vim||')";; # }}}
  *) # {{{
    ret_val="@@-f --scratch --fast --Fast --fast-save --fast-quit --edit -1l -gg -ll -G -cl --type --which --session --no-session --link"
    [[ ! -z $HISTFILE ]] && ret_val+=" -h"
    if [[ $name == *-session || $name == vimS || $3 == '-S' ]]; then
      ret_val=
      if [[ -e "./.vim" ]]; then
        ret_val="$(get-file-list --pwd "./.vim" "*.vim" | sed -e 's/\(Session-\|\.vim\)//g')"
      else
        ret_val="$(get-file-list "Session*.vim" | sed -e 's/\(Session-\|\.vim\)//g')"
      fi
      [[ -e 'Session.vim' && -L 'Session.vim' && " $ret_val " == *\ Session\ * ]] && ret_val="${ret_val/Session}"
    elif $use_gui; then
      [[ $2 == 1 ]] && ret_val="$($binary --serverlist)"
    fi ;; # }}}
  esac
  echo "$ret_val"
  exit 0
  # }}}
elif [[ "$1" == "--link" ]]; then # {{{
  shift
  pre="Session-"
  d="."; [[ -e "./.vim" ]] && d="./.vim" && pre=
  [[ $1 == '--all' ]] && shift && set -- $(command cd $VIM_SESSIONS_PATH 2>/dev/null && ls *.vim | sed 's|\(\.as\)\?\.vim||' | sort -u)
  for src; do
    src="$VIM_SESSIONS_PATH/$src"
    [[ -e $src || -e $src.vim || -e $src.as.vim ]] || continue
    if [[ -e $src ]]; then
      dst=$(basename $src) && dst=$pre${dst#Session-}
      rm $d/$dst
      ln -sf $src $d/$dst
    else
      for i in $src.vim $src.as.vim; do
        [[ -e $i ]] || continue
        dst=$(basename $i) && dst=$pre${dst#Session-}
        rm -f $d/$dst
        ln -sf $i $d/$dst
      done
    fi
  done
  exit 0
fi # }}}
if $use_gui; then # {{{
  [[ "$PWD" != "/" ]] && server_name="${PWD/*\/}" || server_name="/"
  if checkRemoteVim $1; then # {{{
    server_name=$1
    shift
    name=mvim # }}}
  else # Searching open session in parent folders # {{{
    case "$name" in
    m*|g*|r*|_m*|_g*|_r*)
      dir=$PWD
      while true; do
        [[ "$dir" != "/" ]] && p=$(echo ${dir/*\/} | tr [a-z] [A-Z]) || p="/"
        checkRemoteVim $p
        [[ $? == 0 ]] && server_name=$p && break
        [[ "$dir" == "/" ]] && break
        dir=$(cd "$dir/.."; pwd)
      done;;
    esac
  fi # }}}
  # Graphic mode # {{{
  case "$name" in
  m*|g*|r*|_m*|_g*|_r*)
    open_file_method="--remote-tab-silent"
    opts="-g $opts --servername $server_name";;
  esac # }}}
fi # }}}
# Options for each of vim modes # {{{
case "$name" in
_*|*vimdiff*) open_file_method='';;&
vimdiffgit)   opts+=" -c ':map qq :quitall!<CR>'";;&
*vimdiff*)    diff_mode=true; opts+=" -dO";;
*view)        opts+=" -R";;
*ex)          opts+=" -e";;
*-session | vimS) # {{{
  [[ -e "./.vim" ]] && d="./.vim/" || d="./Session-"
  sessionFile="$1"
  if [[ -z "$sessionFile" ]]; then # {{{
    # Session from window name # {{{
    if [[ -n $TMUX ]]; then
      title="$(tmux display-message -p -t $TMUX_PANE -F '#{window_name}')"
      title="${title,,}"
      for s in $title ${title%%--*}; do
        if [[ -e "$d$s.as.vim" ]]; then
          sessionFile="$d$s.as.vim"
        elif [[ -e "$d$s.vim" ]]; then
          sessionFile="$d$s.vim"
        fi
        [[ ! -z $sessionFile ]] && break
        [[ $title == ${title%%--*} ]] && break
      done
    fi # }}}
    # Default session # {{{
    if [[ -z $sessionFile ]]; then
      if [[ -e "${d%-}.as.vim" ]]; then
        sessionFile="${d%-}.as.vim"
      elif [[ -e "${d%-}.vim" ]]; then
        sessionFile="${d%-}.vim"
      fi
    fi # }}}
    # Newest session # {{{
    if [[ -z $sessionFile ]]; then
      sessionFile="$(get-file-list -t -1 "${d%-}*.vim")"
    fi # }}}
    # }}}
  else # {{{
    shift
    if [[ ! -e $sessionFile ]]; then
      [[ "$sessionFile" != *".vim" ]] && sessionFile="$sessionFile.vim"
      [[ ! -e "$sessionFile" && "$sessionFile" != "$d"* && "$sessionFile" != "${d%-}."* ]] && sessionFile="$d$sessionFile"
      [[ ! -e "$sessionFile" && "$sessionFile" == *".as.vim" ]] && sessionFile="${sessionFile%.as.vim}.vim"
      [[ ! -e "$sessionFile" ]] && echo "Session file [$sessionFile] does not exist" >/dev/stderr
    fi
  fi # }}}
  [[ -z "$sessionFile" || ! -e "$sessionFile" ]] && exit
  sed -i -e 's|'"${PWD/$HOME\//\~\/}"'/||' "$sessionFile"
  if [[ "$sessionFile" == *".as.vim" && -e "${sessionFile/.as}" ]] && ! command grep -q "^edit" "$sessionFile"; then
    echo "Broken autosave for "${sessionFile/.as}", restoring from original"
    cp "$(readlink -f "$sessionFile")" "$(readlink -f "$sessionFile").bck"
    cp "${sessionFile/.as}" "$sessionFile"
  fi
  if [[ -e "./.vim" ]]; then
    ln -sf "$sessionFile" ./Session.tmp.vim
    sessionFile="./Session.tmp.vim"
    ( sleep 5; rm -f $sessionFile ) &
    disown
  fi
  opts+=" -S \"$sessionFile\""
  ;; # }}}
esac # }}}
# Parse arguments # {{{
[[ "$name" == 'vi' ]] && check_session_file=false
files=
if $parsing_parameters; then # {{{
  [[ ! -z $VIM_ENV ]] && set -- $VIM_ENV "$@"
  stdin=false
  if [[ ! -t 0 ]]; then # {{{
    stdin=true
    if [[ " $@ " != *\ -\ * ]]; then
      opts+=" -"
    fi
    [[ $1 == '-' ]] && shift
  fi # }}}
  if ! $stdin && [[ $name == 'vim' && $@ == "--Fast" ]]; then # {{{
    optsEnd+=" -c :Files"
  fi # }}}
  if [[ ! -z "$1" ]]; then # {{{
    fileLast= addEval=false
    declare -a evalPred=
    while [[ ! -z "$1" ]]; do # {{{
      case $1 in # {{{
      --no-session) # {{{
        check_session_file=false;; # }}}
      --session) # {{{
        check_session_file=true;; # }}}
      -f1)    files+=" $2/$fileLast"; shift;;
      -S)     opts+=" $1 $2"; shift;;
      -cl)    opts+=" -c 'set cursorline'";;
      -1l | -gg) opts+=" -c 'normal gg'";;
      -ll | -G ) opts+=" -c 'normal G'";;
      --edit) opts+=" -c startinsert";;
      --Fast) opts+=" -c FastVim";;
      --fast-quit) opts+=" -c FastBuffer";;
      --fast-save) opts+=" -c FastVimSave";;
      --fast) # {{{
        if ${VIM_USE_FAST_SAVE:-false}; then
          opts+=" -c FastVimSave"
        else
          opts+=" -c FastBuffer"
        fi;; # }}}
      --scratch | -) # {{{
        opts+=" -c ScratchBuffer"
        [[ $1 == '-' ]] && opts+=" $1";; # }}}
      --which) # {{{
        shift
        files=$(which $1 2>/dev/null)
        [[ -z $files || ! -e $files ]] && echo "File not found" >/dev/stderr && exit 1;; # }}}
      --type) # {{{
        shift
        $IS_MAC && ! declare -F | command grep -q " $1\$" && source $ALIASES --force
        ! declare -F | command grep -q " $1\$" && echo "Function not found" >/dev/stderr && exit 1
        f="$TMP_MEM_PATH/$1-vim.sh"
        declare -f $1 >"$f"
        sum="$(sha1sum "$f")"
        if $0 -c 'set ft=bash' "$f" && [[ "$sum" != "$(sha1sum "$f")" ]]; then # {{{
          if [[ -n $TMUX ]]; then
            tmux send-keys " source $f; export -f $1"
          elif which xclip >/dev/null 2>&1; then
            echo "source $f" | command xclip -selection clipboard
            echo "Paste the clipboard to source modified '$1()' function"
          else
            echo "Do: source $f"
          fi
        fi # }}}
        exit 0
        ;; # }}}
      -c) # {{{
        if [[ $2 != \'* && $2 != \"* ]]; then
          opts+=" -c \"$2\""
          shift
        else
          opts+=" -c"
          while [[ ! -z $2 ]]; do
            opts+=" $2"
            shift
            [[ $2 == *\' && $2 == *\" ]] && break
          done
        fi;; # }}}
      --sort) # {{{
        addEval=true; evalPred[${#evalPred[@]}]="sort";; # }}}
      --path) # {{{
        addEval=true; evalPred[${#evalPred[@]}]="sed -e 's|/home/.*/|//|g' -e 's|\./.*/|.//|g'";; # }}}
      --eval) # {{{
        addEval=true
        shift; break;; # }}}
      -h) # {{{
        [[ -z $HISTFILE || ! -e $HISTFILE ]] && exit 1
        list="$(cat -n $HISTFILE | sort -s -k2 -u | sort -s -k1,1n | cut -c8- | tail -n 40 | tac | fzf --no-sort --prompt "command history> ")"
        [[ -z $list ]] && exit 0
        while read i; do
          echorm "Command from history as a file: '$i'"
          files+=" <($i)"
        done < <(echo "$list")
        ;; # }}}
      -*)    opts+=" $1";;
      ++*)   opts+=" +\"execute 'normal! ${1#++}'\"";;
      +*)    opts+=" \"$1\"";;
      *)     files+=" \"$1\""; fileLast="$1";;
      esac # }}}
      shift
    done # }}}
    if $addEval; then # {{{
      set -- "${evalPred[@]}" "$@"
      if ! $stdin; then # {{{
        opts+=" $open_file_method"
        for f in $files; do
          opts+=" <(cat $f"
          for a; do
            [[ ! -z $a ]] && opts+=" | $a"
          done
          opts+=")"
        done # }}}
      else # {{{
        bbinary=
        for a; do
          [[ ! -z $a ]] && bbinary+="$a | "
        done
        binary="$bbinary$binary"
      fi # }}}
      files=
      shift $#
    fi # }}}
    [[ ! -z "$files" ]] && opts+=" $open_file_method"
  fi # }}}
  if $check_session_file; then # {{{
    if [[ $opts != *-S\ * ]]; then
      suffixes=".as.vim .vim"
      if [[ -n $TMUX ]]; then
        wName="$(tmux display-message -pF '#W')" && wName="${wName,,}"
        suffixes="$wName.as.vim $wName.vim $suffixes"
      fi
      for d in ./.vim .; do
        [[ -e $d ]] || continue
        prefix=
        case $d in
        .) prefix="Session-";;
        esac
        for s in $suffixes; do
          if [[ -e $d/$prefix$s ]]; then
            opts+=" -S $d/$prefix$s"
            break 2
          fi
        done
      done
    fi
  fi # }}}
# }}}
else # {{{
  files="$@"
fi # }}}
# }}}
# Launch # {{{
if $diff_mode && [[ ! -z $files ]]; then
  eval command diff -q $files >/dev/null 2>&1 && echor "Files are the same" && exit 0
fi
echorm "$binary $opts $optsEnd $files"
eval "$binary" $opts $optsEnd $files
# }}}

